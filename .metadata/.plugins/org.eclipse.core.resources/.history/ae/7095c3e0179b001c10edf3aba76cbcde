package List_eaterators;

public class DoublyLinkedList {
	public Link first;
	public DoublyLinkedList() {
		super();
		this.first = null;
	
	}
	public boolean isEmpty() {
		return first==null;
	}
	public Link deleteKey(long key) {
		Link current = first;
		while(current.val!=key) {
			current = current.next;
			if(current.next==null) {///no match found
				return null;
			}
		}
		if(current==first) {
			first = current.next;
		}
		else {
			current.before.next=current.next;
		}
		if(current==last) {
			last=current.before;
			
		}
		else {
			current.next.before=current.before;
		}
		
		return current;
	}
	
	public void displayFoward() {
		System.out.println("First to last");
		Link current = first;
		while(current !=null) {
			current.display();
			current=current.next;
		}
		System.out.println("");
	}
	public void displayBackard() {
		System.out.println("Last to first");
		Link current = last;
		while(current !=null) {
			current.display();
			current=current.before;
		}
		System.out.println("");
	}
	public void insertFirst(long val) {
		Link newL = new Link(val);
		if(isEmpty()) {
			last=newL;
		}
		else {
			first.before=newL;
		}
		newL.next=first;
		first=newL;
	}
	public void insertLast(long val) {
		Link newL = new Link(val);
		if(isEmpty()) {
			first=newL;
		}
		else {
			last.next=newL;
			newL.before=last;

		}
		last=newL;
	}
	public Link deleteFirst() {
		Link temp = first;
		if(first.next==null) {
			last=null;
		}
		else {
			first.next.before=null;
		}
		first = first.next;
		return temp;
	}
	public Link deleteLast() {
		Link temp = last;
		if(first.next==null) {
			first=null;
		}
		else {
			last.before.next=null;
		}
		last = last.before;
		return temp;
	}
	public boolean insertBefore(long key,long val) {
		Link current = first;
		while(current.val!=key) {
			current=current.next;
			if(current==null) {
				return false;
			}
		}
		Link nLink = new Link(val);
		if(current==first) {
			nLink.next=first;
			first.before=nLink;
			first=nLink;
		}
		else {
			nLink.next=current;
			current.before.next=nLink;
			nLink.before=current.before;
			current.before=nLink;
		}
		return true;
	}
	public boolean insertAfter(long key,long val) {
		Link current = first;
		while(current.val!=key) {
			current=current.next;
			if(current==null) {
				return false;
			}
		}
		Link nLink = new Link(val);
		if(current==last) {
			nLink.next=null;
		
			last=nLink;
		}
		else {
			nLink.next=current.next;
			current.next.before=nLink;
		}
		nLink.before=current;
		current.next=nLink;

//		
		return true;
	}
	

}
